#!/bin/bash
#
# Generated by Chef
#
# Back up directories/files into an S3 bucket

set -e

suffix=.cloud-backup
if [ -f /tmp/*"$suffix" ] ; then
    ( >&2 echo "[ERROR] Another operation might still be in progress" )
    exit 200
fi
tmp_file=$( mktemp --suffix "$suffix" )

bucket=<%= @bucket %>
region=<%= @region %>
bak_dir=<%= @dir_tmp %>

aws_bin=<%= @bin_aws %>
tar_bin=<%= @bin_tar %>

<% if @is_encrypted -%>
pub_key_file=<%= @key_pub %>

<% end -%>
# Create the tarball.
# Args:
#   $1 = full path to be backed up, e.g. '/var/src/mydir'
#   $2 = desired filename, sans '.tar.gz' extension, e.g. 'myfilename'
tar_dir() {
    bname=$( basename "$1" )
    dname=$( dirname "$1" )

    echo "$(date) : Creating tarball ${2}.tar.gz from ${1}"
    "$tar_bin" -C "${dname}" -czf "${bak_dir}/${2}.tar.gz" "$bname"
}

<% if @is_encrypted -%>
# Encrypt a tarball using OpenSSL and a given public key.
# The original file will be replaced by a new one with the same filename,
# suffixed with '.enc'.
#
# Given file should be located in $bak_dir.
# Args:
#   $1 = filename, sans '.tar.gz' extension, e.g. 'myfilename'
encrypt_tarball() {
    echo "$(date) : Encrypt file ${1}.tar.gz"
    openssl smime -encrypt -binary -text -aes256 -in "${bak_dir}/${1}.tar.gz" \
            -out "${bak_dir}/${1}.tar.gz.enc" -outform DER "${pub_key_file}"
    rm "${bak_dir}/${1}.tar.gz"
}

<% end -%>
# Upload the tarball to the S3 bucket. It will be uploaded
# to this location: ${bucket}/myfile.tar.gz.enc
#
# Args:
#   $1 = filename, sans '.tar.gz' extension, e.g. 'myfilename'
upload_to_s3() {
    bak_keyname=$1
<% if @is_encrypted -%>
    fname="${1}.tar.gz.enc"
<% else -%>
    fname="${1}.tar.gz"
<% end -%>

    echo "$(date) : Upload ${fname} to S3 bucket ${bucket}"

    "$aws_bin" --region "$region" \
        s3 mv "${bak_dir}/${fname}" \
        "s3://${bucket}/${fname}"
}

if [[ ! -d "$bak_dir" ]] ; then
    mkdir -p "$bak_dir"
fi

<% @paths.each do |path| -%>
<%   bname  = path[:backup_filename] || ::File.basename(path[:path]) -%>
if [[ -d <%= path[:path] %> || -f <%= path[:path] %> ]] ; then
    stamp=$( date +"%FT%T" )
    bname="<%= bname %>_${stamp}"

    tar_dir <%= path[:path] %> "$bname"
<%   if @is_encrypted -%>
    encrypt_tarball "$bname"
<%   end -%>
    upload_to_s3 "$bname"
else
    >&2 echo "$(date) [WARNING] Path <%= path[:path] %> does not exist"
fi

<% end -%>
rm "$tmp_file"
echo "$(date) : Done"
